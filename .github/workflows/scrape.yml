name: Fetch 24/7 Streams (dlhd.dad)

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 certifi

      - name: Fetch daddy.json and extract m3u8 (with SSL fallback)
        env:
          DADDY_URL: "https://dlhd.dad/daddy.json"
        run: |
          python - <<'PY'
          import requests, json, re, sys, time
          from bs4 import BeautifulSoup
          from urllib.parse import urljoin, urlparse
          import certifi
          import requests.exceptions
          import urllib3

          DADDY = "https://dlhd.dad/daddy.json"
          session = requests.Session()
          session.headers.update({
              "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
                            "(KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36",
              "Referer": "https://dlhd.dad/",
              "Origin": "https://dlhd.dad"
          })

          def fetch_json(url):
              # try using certifi CA bundle first (preferred)
              try:
                  resp = session.get(url, timeout=20, verify=certifi.where())
                  resp.raise_for_status()
                  return resp.json()
              except requests.exceptions.SSLError as e:
                  print("SSL verification failed when fetching json:", e, file=sys.stderr)
                  print("Retrying with SSL verification disabled (INSECURE).", file=sys.stderr)
                  urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
                  resp = session.get(url, timeout=20, verify=False)
                  resp.raise_for_status()
                  return resp.json()
              except Exception as e:
                  print("Failed to fetch JSON:", e, file=sys.stderr)
                  raise

          def resolve_m3u8_from_page(page_url):
              try:
                  # try with certifi first
                  try:
                      r = session.get(page_url, timeout=15, verify=certifi.where())
                  except requests.exceptions.SSLError:
                      # fallback to insecure if SSL chain is broken
                      urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
                      r = session.get(page_url, timeout=15, verify=False)

                  html = r.text
                  soup = BeautifulSoup(html, "html.parser")
                  iframe = soup.select_one("iframe#thatframe") or soup.find("iframe")
                  if not iframe:
                      return None
                  iframe_src = iframe.get("src")
                  if not iframe_src:
                      return None
                  iframe_url = iframe_src if iframe_src.startswith("http") else urljoin("https://dlhd.dad", iframe_src)

                  # fetch iframe page
                  try:
                      r2 = session.get(iframe_url, timeout=15, verify=certifi.where())
                  except requests.exceptions.SSLError:
                      urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
                      r2 = session.get(iframe_url, timeout=15, verify=False)

                  text = r2.text
                  # find first .m3u8 URL in iframe content
                  m = re.search(r"(https?://[^\s\"']+\.m3u8[^\s\"']*)", text)
                  if not m:
                      return None
                  m3u8_url = m.group(1)

                  # prepare headers for players
                  parsed = urlparse(iframe_url)
                  origin = f"{parsed.scheme}://{parsed.netloc}"
                  referer = iframe_url if iframe_url.endswith("/") else iframe_url + "/"
                  headers = {
                      "User-Agent": session.headers.get("User-Agent"),
                      "Origin": origin,
                      "Referer": referer
                  }
                  return {"url": m3u8_url, "headers": headers}
              except Exception as e:
                  print("resolve_m3u8_from_page error for", page_url, e, file=sys.stderr)
                  return None

          try:
              data = fetch_json(DADDY)
          except Exception as e:
              print("Exiting: could not fetch daddy.json:", e, file=sys.stderr)
              raise SystemExit(1)

          events = []
          # data structure unknown? assume list/dict; handle both
          if isinstance(data, dict):
              iterable = data.get("channels") or data.get("items") or list(data.values())
          else:
              iterable = data

          # normalize iterable to list of dicts
          for item in iterable:
              if not isinstance(item, dict):
                  continue
              title = item.get("title") or item.get("name") or item.get("channel") or ""
              iframe_link = item.get("link") or item.get("iframe") or item.get("url") or ""
              m3u8 = None
              headers = None
              if iframe_link:
                  # make absolute
                  if not iframe_link.startswith("http"):
                      iframe_link = urljoin("https://dlhd.dad", iframe_link)
                  resolved = resolve_m3u8_from_page(iframe_link)
                  if resolved:
                      m3u8 = resolved["url"]
                      headers = resolved["headers"]

              events.append({
                  "title": title,
                  "iframe": iframe_link,
                  "m3u8": m3u8,
                  "headers": headers
              })

          with open("events.json", "w", encoding="utf-8") as fh:
              json.dump(events, fh, ensure_ascii=False, indent=2)

          print("Wrote events.json with", len(events), "entries")
          PY

      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add events.json
          git commit -m "Update events.json" || echo "No changes to commit"
          git push
