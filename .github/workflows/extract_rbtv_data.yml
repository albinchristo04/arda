name: Extract RBTV Data

on:
  schedule:
    # Run every 8 hours (at 00:00, 08:00, 16:00 UTC)
    - cron: '0 */8 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches:
      - main
    paths:
      - 'rbtv_extractor*.py'
      - '.github/workflows/extract_rbtv_data.yml'

jobs:
  extract:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install requests pycryptodomex urllib3 cloudscraper
      
      - name: Try V2 Extractor (New API Method)
        id: extractor_v2
        continue-on-error: true
        run: |
          echo "Attempting extraction with V2 (discovered API endpoints)..."
          python rbtv_extractor_v2.py
          if [ -f "data/rbtv_data.json" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "âœ“ V2 extractor succeeded!"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "âœ— V2 extractor failed"
            exit 1
          fi
      
      - name: Try V1 Extractor (Fallback Method)
        if: steps.extractor_v2.outputs.success != 'true'
        id: extractor_v1
        continue-on-error: true
        run: |
          echo "V2 failed, trying V1 (Backendless API method)..."
          python rbtv_extractor.py
          if [ -f "data/rbtv_data.json" ]; then
            echo "success=true" >> $GITHUB_OUTPUT
            echo "âœ“ V1 extractor succeeded!"
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "âœ— V1 extractor failed"
            exit 1
          fi
      
      - name: Check if any extractor succeeded
        run: |
          if [ "${{ steps.extractor_v2.outputs.success }}" != "true" ] && [ "${{ steps.extractor_v1.outputs.success }}" != "true" ]; then
            echo "âœ— Both extractors failed!"
            exit 1
          fi
          
          if [ "${{ steps.extractor_v2.outputs.success }}" == "true" ]; then
            echo "EXTRACTOR_USED=v2" >> $GITHUB_ENV
            echo "âœ“ Using V2 extractor results"
          else
            echo "EXTRACTOR_USED=v1" >> $GITHUB_ENV
            echo "âœ“ Using V1 extractor results"
          fi
      
      - name: Verify data files
        run: |
          echo "Verifying extracted data..."
          
          if [ -f "data/rbtv_data.json" ]; then
            echo "âœ“ rbtv_data.json created"
            SIZE=$(stat -f%z "data/rbtv_data.json" 2>/dev/null || stat -c%s "data/rbtv_data.json")
            echo "  File size: $SIZE bytes"
          else
            echo "âœ— rbtv_data.json not found"
            exit 1
          fi
          
          if [ -f "data/summary.json" ]; then
            echo "âœ“ summary.json created"
            cat data/summary.json
          fi
          
          # List all generated files
          echo ""
          echo "Generated files:"
          ls -lh data/
      
      - name: Check for changes
        id: check_changes
        run: |
          git add data/
          if git diff --staged --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
          fi
      
      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add data/
          git commit -m "Update RBTV data (${{ env.EXTRACTOR_USED }}) - $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push
      
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rbtv-data-${{ github.run_number }}
          path: data/
          retention-days: 30
      
      - name: Create release tag (on schedule)
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'schedule'
        run: |
          TAG_NAME="data-$(date -u +'%Y%m%d-%H%M%S')"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          git tag $TAG_NAME
          git push origin $TAG_NAME
      
      - name: Create release (on schedule)
        if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'schedule'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: RBTV Data Release ${{ env.TAG_NAME }}
          body: |
            ðŸ“¡ Automated RBTV data extraction
            
            **Extractor Used:** ${{ env.EXTRACTOR_USED }}
            **Extraction Date:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            
            **Files included:**
            - `rbtv_data.json` - Full dataset with all configuration
            - `summary.json` - Quick statistics
            - Additional data files (matches, channels, etc.)
            
            **Supported Domains:**
            - genegc02.ya8z6nutsz3jhbtmail.shop
            - apis-data10.tcgfs39a2.xyz
            - fhlsport200.tbafs39a1.xyz
            - www.fctv33.buzz
            - rbtvplus06.com
            - fctv33.com
            - rbsports77.lat
          files: |
            data/*.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
